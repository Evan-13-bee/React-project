[{"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\Profile.tsx":"1","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.jsx":"2","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\index.tsx":"3","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx":"4","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx":"5","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Dialogs.tsx":"6","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Message\\Message.tsx":"7","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx":"8","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Navbar\\Navbar.tsx":"9","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\App.tsx":"10","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\reportWebVitals.ts":"11","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Header\\Header.tsx":"12","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\state.tsx":"13","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\DialogsReducer.tsx":"14","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ProfileReducer.tsx":"15","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ReduxStore.tsx":"16","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\SideBarReducer.tsx":"17","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx":"18","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogsContainer.tsx":"19","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\UsersReducer.tsx":"20","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\UsersContainer.tsx":"21","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\Users.tsx":"22","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\UsersComponent.tsx":"23","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Common\\Preloader.tsx":"24"},{"size":513,"mtime":1613566735646,"results":"25","hashOfConfig":"26"},{"size":480,"mtime":1608984749445,"results":"27","hashOfConfig":"26"},{"size":510,"mtime":1612864932686,"results":"28","hashOfConfig":"26"},{"size":420,"mtime":1608979058060,"results":"29","hashOfConfig":"26"},{"size":1516,"mtime":1612594675037,"results":"30","hashOfConfig":"26"},{"size":1496,"mtime":1612594542039,"results":"31","hashOfConfig":"26"},{"size":223,"mtime":1611211597161,"results":"32","hashOfConfig":"26"},{"size":456,"mtime":1611211675496,"results":"33","hashOfConfig":"26"},{"size":970,"mtime":1613126539608,"results":"34","hashOfConfig":"26"},{"size":1275,"mtime":1612953243185,"results":"35","hashOfConfig":"26"},{"size":425,"mtime":1607310671016,"results":"36","hashOfConfig":"37"},{"size":269,"mtime":1608977702943,"results":"38","hashOfConfig":"26"},{"size":2540,"mtime":1612346596727,"results":"39","hashOfConfig":"26"},{"size":2028,"mtime":1612870922710,"results":"40","hashOfConfig":"26"},{"size":1355,"mtime":1612871759759,"results":"41","hashOfConfig":"26"},{"size":736,"mtime":1613456452942,"results":"42","hashOfConfig":"26"},{"size":152,"mtime":1611574723735,"results":"43","hashOfConfig":"26"},{"size":1989,"mtime":1612606800797,"results":"44","hashOfConfig":"26"},{"size":1436,"mtime":1612606821054,"results":"45","hashOfConfig":"26"},{"size":3330,"mtime":1613466573360,"results":"46","hashOfConfig":"26"},{"size":3734,"mtime":1613566880466,"results":"47","hashOfConfig":"26"},{"size":1600,"mtime":1613125662385,"results":"48","hashOfConfig":"26"},{"size":1951,"mtime":1613564702525,"results":"49","hashOfConfig":"26"},{"size":216,"mtime":1613460287643,"results":"50","hashOfConfig":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tbr3s0",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t855fe",{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"59"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"59"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"59"},"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\Profile.tsx",["118","119","120","121"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.jsx",["122"],"import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;",["123","124"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\index.tsx",[],["125","126"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx",["127"],"import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props: any) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://cdn.shopify.com/s/files/1/0067/2140/5043/products/product-image-654981097_1200x1200.jpg?v=1571960904' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx",["128","129","130"],"import React, { useRef, useState } from 'react';\r\nimport { ArrayType } from '../../Dialogs/Dialogs';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nexport type PropsPostsType = {\r\n    posts: Array<PostsType>\r\n    addPost: () => void\r\n    newPostText: string\r\n    updateNewPostText: (postMessage: string) => void\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst MyPosts = (props: PropsPostsType) => {\r\n\r\n\r\n    let postsElements = props.posts.map((p: PostsType) => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n    let addPost = () => {\r\n        let text = newPostElement.current?.value\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = (e: { currentTarget: { value: string; }; }) => {\r\n        let text = newPostElement.current?.value\r\n        if (text) {\r\n            props.updateNewPostText(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Dialogs.tsx",["131"],"import React, { useState } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport { Route } from \"react-router-dom\";\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport { Message } from './Message/Message';\r\n\r\nexport type DialogsType = {\r\n    dialogs: Array<ArrayType>,\r\n    messages: Array<MessagesType>,\r\n    dispatch: Function\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: number, \r\n    message: string\r\n}\r\n\r\nexport type ArrayType = {\r\n    id: number,\r\n    name: string,\r\n    img: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\nlet [message, setMessage] = useState<string>('')\r\nlet addNewMessage = () => {\r\n    props.dispatch(message)\r\n    setMessage('')\r\n}\r\n\r\n\r\n    let dialogsElements = props.dialogs.map((d: ArrayType) => <DialogItem img={d.img} name={d.name} id={d.id} />); \r\n    let messagesElements = props.messages.map((m: MessagesType) => <Message message={m.message} />);\r\n    \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div>\r\n                <input \r\n                value={message}  \r\n                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                type=\"text\"/>\r\n                <button onClick={addNewMessage}>Отправить</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Message\\Message.tsx",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx",["132"],"import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number,\r\n    img: string,\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}><img src={props.img}/>{props.name}</NavLink>\r\n        </div>);\r\n}\r\n","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Navbar\\Navbar.tsx",["133","134","135"],"import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\App.tsx",["136","137","138","139","140"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Profile from './Components/Profile/Profile';\nimport Navbar from './Components/Navbar/Navbar';\nimport Dialogs, { DialogsType } from './Components/Dialogs/Dialogs';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { PropsPostsType } from './Components/Profile/MyPosts/MyPosts';\nimport { DialogsContainer } from './Components/Dialogs/DialogsContainer';\nimport UsersContainer from './Components/Users/UsersContainer';\n\ntype AppType = {}\n\nfunction App(props: AppType) {\n\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      <Navbar />\n      <div className='app-wrapper-content'>\n        <Route path='/dialogs' render={() =>\n          <DialogsContainer />}\n        />\n        <Route path='/profile' render={() =>\n          <Profile />}\n        /> {/*render () => <Profile posts={posts}/>}  */}\n        <Route path='/users' render={() =>\n          <UsersContainer />}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// updateNewPostText = { props.updateNewPostText }\n// newPostText = { props.state.profilePage.newPostText }\n// posts = { props.state.profilePage.posts }\n// dispatch = { props.dispatch } ","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\reportWebVitals.ts",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Header\\Header.tsx",["141"],"import React from 'react';\r\nimport h from './Header.module.css'\r\n\r\n\r\nconst Header = () => {\r\n    return <div className={h.header}>\r\n        <img className={h.img} src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n    </div>\r\n}\r\n\r\nexport default Header;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\state.tsx",["142"],"import React from 'react';\r\nimport { dialogsReducer } from './DialogsReducer';\r\nimport { profileReducer } from './ProfileReducer';\r\n\r\nexport let store = {\r\n  _state: {\r\n    dialogsPage: {\r\n      messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'How is your it-kamasutra?' },\r\n        { id: 3, message: 'Yo' },\r\n        { id: 4, message: 'Yo' },\r\n        { id: 5, message: 'Yo' }\r\n      ],\r\n      dialogs: [\r\n        { id: 1, name: 'Dimych', img: 'https://diagnostax.co.uk/wp-content/uploads/Cool-Cats-2.0-1024x585.png' },\r\n        { id: 2, name: 'Andrew', img: 'https://wallpaperaccess.com/full/82955.jpg' },\r\n        { id: 3, name: 'Sveta', img: 'https://i.ytimg.com/vi/piFZvpMe_K8/sddefault.jpg' },\r\n        { id: 4, name: 'Sasha', img: 'https://i.pinimg.com/originals/e4/1e/98/e41e98a0ca198a9e47c17c57811cfccf.jpg' },\r\n        { id: 5, name: 'Viktor', img: 'https://www.partneringforpets.org/wp-content/uploads/2014/06/sno-cone.jpg' },\r\n        { id: 6, name: 'Valera', img: 'https://pbs.twimg.com/profile_images/453072762735566848/B52gVHi2.jpeg' }\r\n      ]\r\n    },\r\n    profilePage: {\r\n      posts: [\r\n        { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n        { id: 2, message: 'It\\'s my first post', likesCount: 11 },\r\n        { id: 3, message: 'Blabla', likesCount: 11 },\r\n        { id: 4, message: 'Dada', likesCount: 11 }\r\n      ],\r\n      newPostText: 'it-camasutra'\r\n    },\r\n    sideBar: {}\r\n\r\n\r\n  },\r\n  getState() {\r\n    return this._state\r\n  },\r\n  _callSubscriber(item: any) {\r\n    console.log(item);\r\n  },\r\n\r\n  subscribe(observer: any) {\r\n    this._callSubscriber = observer\r\n  },\r\n  dispatch(action: any) {\r\n    dialogsReducer(this._state.dialogsPage, action) // если отдать кусок массива в функцию, фунция меняет исходный массив?\r\n    profileReducer(this._state.profilePage, action)\r\n\r\n    this._callSubscriber(this._state) // нужен ли здесь параметр, ведь перерисовка вызывается без него\r\n  }\r\n}\r\n\r\nexport const addPostActionCreator = () => {\r\n  return {\r\n    type: 'ADD-POST'\r\n  }\r\n}\r\n\r\nexport let updateNewPostTextActionCreator = (text: string) => {\r\n  return {\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: text\r\n\r\n  }\r\n}\r\n\r\nexport let addNewDialogsMessage = (text: string) => {\r\n  return {\r\n    type: 'ADD-NEW-MESSAGE',\r\n    newMessage: text\r\n  }\r\n}\r\n\r\nwindow.store = store\r\ndeclare global {\r\n  interface Window { store: any; }\r\n}\r\n\r\nwindow.store = window.store || {};\r\n",["143","144"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\DialogsReducer.tsx",["145","146"],"import React from 'react';\r\nimport { ArrayType, MessagesType } from '../Components/Dialogs/Dialogs';\r\nexport type DialogsType = {\r\n  dialogs: Array<ArrayType>,\r\n  messages: Array<MessagesType>,\r\n}\r\n\r\nexport type DialogsReducerActionType =\r\n  ReturnType<typeof addNewDialogsMessage>\r\n\r\nlet initialState: DialogsType = {\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it-kamasutra?' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n    { id: 5, message: 'Yo' }\r\n  ],\r\n  dialogs: [\r\n    { id: 1, name: 'Dimych', img: 'https://diagnostax.co.uk/wp-content/uploads/Cool-Cats-2.0-1024x585.png' },\r\n    { id: 2, name: 'Andrew', img: 'https://wallpaperaccess.com/full/82955.jpg' },\r\n    { id: 3, name: 'Sveta', img: 'https://i.ytimg.com/vi/piFZvpMe_K8/sddefault.jpg' },\r\n    { id: 4, name: 'Sasha', img: 'https://i.pinimg.com/originals/e4/1e/98/e41e98a0ca198a9e47c17c57811cfccf.jpg' },\r\n    { id: 5, name: 'Viktor', img: 'https://www.partneringforpets.org/wp-content/uploads/2014/06/sno-cone.jpg' },\r\n    { id: 6, name: 'Valera', img: 'https://pbs.twimg.com/profile_images/453072762735566848/B52gVHi2.jpeg' }\r\n  ]\r\n}\r\n\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsType = initialState, action: DialogsReducerActionType): DialogsType => {\r\n\r\n  if (action.type == 'ADD-NEW-MESSAGE') {\r\n    // state.dialogs.push({\r\n    //   id: state.dialogs.length,\r\n    //   name: 'User',\r\n    //   img: 'https://wallpaper-house.com/data/out/5/wallpaper2you_60587.jpg'\r\n    // })\r\n    return {\r\n      ...state,\r\n      messages: [\r\n        ...state.messages,\r\n        { id: state.messages.length, message: action.newMessage }// как работает изменение state если передается только кусок стейта\r\n      ]}}\r\n  return state //зачем нам return если снаружи мы перерисовываем весь массив\r\n}\r\n\r\nexport let addNewDialogsMessage = (text: string) => ({\r\n  type: 'ADD-NEW-MESSAGE',\r\n  newMessage: text\r\n}) as const","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ProfileReducer.tsx",["147"],"import React from 'react';\r\nimport { PostsType } from '../Components/Profile/MyPosts/MyPosts';\r\nexport type InitialStateType = {\r\n  posts: Array<PostsType>,\r\n  newPostText: string\r\n}\r\n\r\nexport type ProfileReducerActionType =\r\n  ReturnType<typeof addPostActionCreator> |\r\n  ReturnType<typeof updateNewPostTextActionCreator>\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n    { id: 2, message: 'It\\'s my first post', likesCount: 11 },\r\n    { id: 3, message: 'Blabla', likesCount: 11 },\r\n    { id: 4, message: 'Dada', likesCount: 11 }\r\n  ],\r\n  newPostText: 'it-camasutra'\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileReducerActionType): InitialStateType => {\r\n  if (action.type === 'ADD-POST') {\r\n    let newPost = {\r\n      id: 5,\r\n      message: state.newPostText,\r\n      likesCount: 0\r\n    }\r\n    return {\r\n      ...state,\r\n      posts: [...state.posts, newPost],\r\n      newPostText: ''\r\n    }\r\n  }\r\n  else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n    return { ...state, newPostText: action.newText }\r\n   \r\n  }\r\n  return state\r\n}\r\n\r\nexport const addPostActionCreator = () => ({ type: 'ADD-POST' }) as const\r\n\r\nexport let updateNewPostTextActionCreator = (text: string) => ({ type: 'UPDATE-NEW-POST-TEXT', newText: text } as const\r\n)","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ReduxStore.tsx",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\SideBarReducer.tsx",["148"],"import React from 'react';\r\nlet initialState = {}\r\nexport const sideBarReducer = (state: any = initialState, action: any): any => {\r\n\r\n  return state\r\n}","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx",["149","150","151","152","153","154"],"import React, { Dispatch, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateNewPostTextActionCreator, addPostActionCreator, ProfileReducerActionType, InitialStateType } from '../../../redux/ProfileReducer';\r\nimport { StateStoreType } from '../../../redux/ReduxStore';\r\nimport { ArrayType } from '../../Dialogs/Dialogs';\r\nimport MyPosts from './MyPosts';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nexport type PropsPostsType = {\r\n  store: InitialStateType\r\n}\r\n\r\nexport type PostsType = {\r\n  id: number,\r\n  message: string,\r\n  likesCount: number\r\n}\r\n\r\n// const MyPostsContainer = (props: PropsPostsType) => {\r\n\r\n\r\n//   // let postsElements = props.store.getState().profilePage.posts\r\n\r\n//   let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n\r\n\r\n//   return (\r\n//     <StoreContext.Consumer>{\r\n//       (store) => {\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator())\r\n//           // props.updateNewPostText('')\r\n//         }\r\n\r\n//         let onPostChange = (text: string) => {\r\n//           store.dispatch(updateNewPostTextActionCreator(text))\r\n//         }\r\n//         return <MyPosts\r\n//           updateNewPostText={onPostChange}\r\n//           addPost={addPost}\r\n//           posts={store.getState().profilePage.posts}\r\n//           newPostText={store.getState().profilePage.newPostText}\r\n//         />\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   )\r\n// }\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n  return {\r\n    updateNewPostText: (text: string) => dispatch(updateNewPostTextActionCreator(text)),  \r\n    addPost: () => dispatch(addPostActionCreator())\r\n  }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogsContainer.tsx",["155","156","157","158","159","160","161"],"import React, { Dispatch, useState } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport { Route } from \"react-router-dom\";\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport { Message } from './Message/Message';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { StateStoreType } from '../../redux/ReduxStore';\r\nimport { addNewDialogsMessage, DialogsReducerActionType, DialogsType } from '../../redux/DialogsReducer';\r\n\r\ntype DialogsContainerType = {\r\n  store: DialogsType\r\n}\r\n\r\n// export const DialogsContainer = () => {\r\n\r\n\r\n//   return (\r\n//     <StoreContext.Consumer>{\r\n//       (store) => {\r\n//         let addNewMessage = (message: string) => store.dispatch(addNewDialogsMessage(message))\r\n//         return <Dialogs\r\n//           dialogs={store.getState().dialogsPage.dialogs}\r\n//           messages={store.getState().dialogsPage.messages}\r\n//           dispatch={addNewMessage}\r\n//         />\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   )\r\n// }\r\nlet mapStateToProps = (state: StateStoreType) => { \r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducerActionType>) => {\r\n  return {\r\n    dispatch: (message: string) => dispatch(addNewDialogsMessage(message))\r\n  }\r\n}\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs) \r\n","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\UsersReducer.tsx",["162","163","164","165","166","167"],"import React from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { ArrayType, MessagesType } from '../Components/Dialogs/Dialogs';\r\n\r\nexport enum ACTIONS_TYPE {\r\n  FOLLOW = 'FOLLOW',\r\n  UNFOLLOW = \"UNFOLLOW\",\r\n  USERS = 'SET_USERS',\r\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n  SET_CURRENT_USERS = 'SET_CURRENT_USERS',\r\n  TOOGLE_IS_FETCHING = 'SET_IS_FETCHING'\r\n}\r\ntype LocationType = {\r\n  city: string,\r\n  country: string\r\n}\r\nexport type InitialStateType = {\r\n  users: Array<UsersType>,\r\n  pageSize: number,\r\n  totalUsersCount: number,\r\n  currentPage: number,\r\n  isFetching: boolean\r\n\r\n}\r\nexport type UsersType = {\r\n  id: string,\r\n  followed: boolean,\r\n  name: string,\r\n  photos: {\r\n    \"small\": null | string | undefined\r\n    \"large\": null\r\n  },\r\n  status: string\r\n  location: LocationType,\r\n  photoURL: string\r\n}\r\n\r\n\r\ntype FollowACType = ReturnType<typeof follow>\r\ntype UnfollowACType = ReturnType<typeof unfollow>\r\ntype SetUsersACACType = ReturnType<typeof setUsers>\r\ntype SetUsersCountType = ReturnType<typeof setTotalUsersCount>\r\ntype SetCurrentPage = ReturnType<typeof setCurrentPage>\r\ntype SetIsFetching = ReturnType<typeof toogleIsFetching>\r\nexport type UsersACType = FollowACType\r\n  | UnfollowACType\r\n  | SetUsersACACType\r\n  | SetCurrentPage\r\n  | SetUsersCountType\r\n  | SetIsFetching\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n  users: [],\r\n  pageSize: 5,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true\r\n}\r\n\r\n\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersACType): InitialStateType => {\r\n\r\n  switch (action.type) {\r\n\r\n    case ACTIONS_TYPE.FOLLOW:\r\n      return {\r\n        ...state,\r\n        // users: [...state.users] //same\r\n        users: state.users.map(e => {\r\n          if (e.id == action.userId) return { ...e, followed: true }\r\n          return e\r\n        }\r\n\r\n        ) //same\r\n      }\r\n\r\n    case ACTIONS_TYPE.SET_CURRENT_USERS:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count\r\n      }\r\n\r\n    case ACTIONS_TYPE.TOOGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n\r\n    case ACTIONS_TYPE.UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        // users: [...state.users] //same\r\n        users: state.users.map(e => {\r\n          if (e.id == action.userId) return { ...e, followed: false }\r\n          return e\r\n        }\r\n\r\n        ) //same\r\n      }\r\n\r\n    case ACTIONS_TYPE.SET_CURRENT_PAGE:\r\n      return {\r\n        ...state, currentPage: action.currentPage\r\n      }\r\n\r\n    case ACTIONS_TYPE.USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const follow = (userId: string) => ({ type: ACTIONS_TYPE.FOLLOW, userId }) as const\r\nexport const unfollow = (userId: string) => ({ type: ACTIONS_TYPE.UNFOLLOW, userId }) as const\r\nexport const setUsers = (users: Array<UsersType>) => ({ type: ACTIONS_TYPE.USERS, users }) as const\r\nexport const setCurrentPage = (currentPage: number) => ({ type: ACTIONS_TYPE.SET_CURRENT_PAGE, currentPage }) as const\r\nexport const setTotalUsersCount = (usersCount: number) => ({ type: ACTIONS_TYPE.SET_CURRENT_USERS, count: usersCount }) as const\r\nexport const toogleIsFetching = (isFetching: boolean) => ({ type: ACTIONS_TYPE.TOOGLE_IS_FETCHING, isFetching }) as const\r\n","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\UsersContainer.tsx",["168","169","170","171","172"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\Users.tsx",["173","174"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Users\\UsersComponent.tsx",["175","176","177","178"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Common\\Preloader.tsx",["179","180","181"],"import axios from 'axios'\r\nimport React, { Dispatch } from 'react'\r\nimport preloader from '../../Img/Preloader.gif'\r\n\r\nexport let Preloader = () => {\r\n  return <img style={{ height: '100px' }} src={preloader} />\r\n}\r\n",{"ruleId":"182","severity":1,"message":"183","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":9},{"ruleId":"182","severity":1,"message":"186","line":3,"column":8,"nodeType":"184","messageId":"185","endLine":3,"endColumn":15},{"ruleId":"182","severity":1,"message":"187","line":3,"column":19,"nodeType":"184","messageId":"185","endLine":3,"endColumn":33},{"ruleId":"182","severity":1,"message":"188","line":8,"column":6,"nodeType":"184","messageId":"185","endLine":8,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":9,"column":17,"nodeType":"191","endLine":10,"endColumn":125},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"189","severity":1,"message":"190","line":8,"column":7,"nodeType":"191","endLine":8,"endColumn":129},{"ruleId":"182","severity":1,"message":"196","line":1,"column":25,"nodeType":"184","messageId":"185","endLine":1,"endColumn":33},{"ruleId":"182","severity":1,"message":"197","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":19},{"ruleId":"182","severity":1,"message":"198","line":25,"column":13,"nodeType":"184","messageId":"185","endLine":25,"endColumn":17},{"ruleId":"182","severity":1,"message":"199","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":15,"column":32,"nodeType":"191","endLine":15,"endColumn":54},{"ruleId":"200","severity":1,"message":"201","line":18,"column":17,"nodeType":"191","endLine":18,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":21,"column":17,"nodeType":"191","endLine":21,"endColumn":20},{"ruleId":"200","severity":1,"message":"201","line":24,"column":17,"nodeType":"191","endLine":24,"endColumn":20},{"ruleId":"182","severity":1,"message":"202","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":12},{"ruleId":"182","severity":1,"message":"203","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":15},{"ruleId":"182","severity":1,"message":"204","line":7,"column":19,"nodeType":"184","messageId":"185","endLine":7,"endColumn":30},{"ruleId":"182","severity":1,"message":"205","line":8,"column":10,"nodeType":"184","messageId":"185","endLine":8,"endColumn":23},{"ruleId":"182","severity":1,"message":"187","line":9,"column":10,"nodeType":"184","messageId":"185","endLine":9,"endColumn":24},{"ruleId":"189","severity":1,"message":"190","line":7,"column":9,"nodeType":"191","endLine":7,"endColumn":97},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"192","replacedBy":"207"},{"ruleId":"194","replacedBy":"208"},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"209","severity":1,"message":"210","line":33,"column":19,"nodeType":"211","messageId":"212","endLine":33,"endColumn":21},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"213","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":33},{"ruleId":"182","severity":1,"message":"196","line":1,"column":35,"nodeType":"184","messageId":"185","endLine":1,"endColumn":43},{"ruleId":"182","severity":1,"message":"197","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":19},{"ruleId":"182","severity":1,"message":"183","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":9},{"ruleId":"182","severity":1,"message":"214","line":8,"column":8,"nodeType":"184","messageId":"185","endLine":8,"endColumn":12},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"196","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":35},{"ruleId":"182","severity":1,"message":"183","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":9},{"ruleId":"182","severity":1,"message":"199","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":15},{"ruleId":"182","severity":1,"message":"215","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":20},{"ruleId":"182","severity":1,"message":"216","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":17},{"ruleId":"182","severity":1,"message":"217","line":11,"column":6,"nodeType":"184","messageId":"185","endLine":11,"endColumn":26},{"ruleId":"182","severity":1,"message":"206","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"218","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":12},{"ruleId":"182","severity":1,"message":"197","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":19},{"ruleId":"182","severity":1,"message":"219","line":3,"column":21,"nodeType":"184","messageId":"185","endLine":3,"endColumn":33},{"ruleId":"209","severity":1,"message":"210","line":72,"column":20,"nodeType":"211","messageId":"212","endLine":72,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":96,"column":20,"nodeType":"211","messageId":"212","endLine":96,"endColumn":22},{"ruleId":"182","severity":1,"message":"220","line":2,"column":17,"nodeType":"184","messageId":"185","endLine":2,"endColumn":25},{"ruleId":"182","severity":1,"message":"221","line":5,"column":18,"nodeType":"184","messageId":"185","endLine":5,"endColumn":34},{"ruleId":"182","severity":1,"message":"222","line":5,"column":110,"nodeType":"184","messageId":"185","endLine":5,"endColumn":121},{"ruleId":"182","severity":1,"message":"223","line":7,"column":8,"nodeType":"184","messageId":"185","endLine":7,"endColumn":17},{"ruleId":"224","severity":1,"message":"225","line":84,"column":1,"nodeType":"226","messageId":"227","endLine":107,"endColumn":2},{"ruleId":"182","severity":1,"message":"218","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":12},{"ruleId":"228","severity":1,"message":"229","line":27,"column":15,"nodeType":"191","endLine":27,"endColumn":205},{"ruleId":"182","severity":1,"message":"230","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"218","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":12},{"ruleId":"209","severity":1,"message":"210","line":28,"column":40,"nodeType":"211","messageId":"212","endLine":28,"endColumn":42},{"ruleId":"228","severity":1,"message":"229","line":37,"column":17,"nodeType":"191","endLine":37,"endColumn":207},{"ruleId":"182","severity":1,"message":"230","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"220","line":2,"column":17,"nodeType":"184","messageId":"185","endLine":2,"endColumn":25},{"ruleId":"189","severity":1,"message":"190","line":6,"column":10,"nodeType":"191","endLine":6,"endColumn":61},"@typescript-eslint/no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","'MyPosts' is defined but never used.","'PropsPostsType' is defined but never used.","'ProfileType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["231"],"no-negated-in-lhs",["232"],"'useState' is defined but never used.","'ArrayType' is defined but never used.","'text' is assigned a value but never used.","'Route' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'logo' is defined but never used.","'Dialogs' is defined but never used.","'DialogsType' is defined but never used.","'BrowserRouter' is defined but never used.","'React' is defined but never used.",["231"],["232"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","'Post' is defined but never used.","'DialogItem' is defined but never used.","'Message' is defined but never used.","'DialogsContainerType' is defined but never used.","'v1' is defined but never used.","'MessagesType' is defined but never used.","'Dispatch' is defined but never used.","'InitialStateType' is defined but never used.","'UsersACType' is defined but never used.","'preloader' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]