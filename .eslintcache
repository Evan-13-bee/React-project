[{"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\Profile.tsx":"1","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.jsx":"2","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\index.tsx":"3","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx":"4","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx":"5","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Dialogs.tsx":"6","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Message\\Message.tsx":"7","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx":"8","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Navbar\\Navbar.tsx":"9","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\App.tsx":"10","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\reportWebVitals.ts":"11","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Header\\Header.tsx":"12","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\state.tsx":"13","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\DialogsReducer.tsx":"14","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ProfileReducer.tsx":"15","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ReduxStore.tsx":"16","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\SideBarReducer.tsx":"17","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx":"18"},{"size":695,"mtime":1611464441855,"results":"19","hashOfConfig":"20"},{"size":480,"mtime":1608984749445,"results":"21","hashOfConfig":"20"},{"size":494,"mtime":1611464966814,"results":"22","hashOfConfig":"20"},{"size":420,"mtime":1608979058060,"results":"23","hashOfConfig":"20"},{"size":1610,"mtime":1611295726079,"results":"24","hashOfConfig":"20"},{"size":1547,"mtime":1611122110799,"results":"25","hashOfConfig":"20"},{"size":223,"mtime":1611211597161,"results":"26","hashOfConfig":"20"},{"size":456,"mtime":1611211675496,"results":"27","hashOfConfig":"20"},{"size":810,"mtime":1608978576024,"results":"28","hashOfConfig":"20"},{"size":1400,"mtime":1611464409713,"results":"29","hashOfConfig":"20"},{"size":425,"mtime":1607310671016,"results":"30","hashOfConfig":"31"},{"size":269,"mtime":1608977702943,"results":"32","hashOfConfig":"20"},{"size":2540,"mtime":1611301639349,"results":"33","hashOfConfig":"20"},{"size":1607,"mtime":1611301448785,"results":"34","hashOfConfig":"20"},{"size":885,"mtime":1611211442520,"results":"35","hashOfConfig":"20"},{"size":382,"mtime":1611212249204,"results":"36","hashOfConfig":"20"},{"size":147,"mtime":1611211929254,"results":"37","hashOfConfig":"20"},{"size":1154,"mtime":1611464741159,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},"1tbr3s0",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t855fe",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"42"},"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\Profile.tsx",["90","91","92"],"import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts, { PropsPostsType } from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\n// type ProfileType = {\r\n//     updateNewPostText: props.updateNewPostText,\r\n//     newPostText: props.state.profilePage.newPostText,\r\n//     posts: props.state.profilePage.posts,\r\n//     dispatch: props.dispatch\r\n// }\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPostsContainer\r\n                store={props.store}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;",["93","94"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.jsx",["95"],"import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;",["96","97"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\index.tsx",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\Post\\Post.tsx",["98"],"import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props: any) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://cdn.shopify.com/s/files/1/0067/2140/5043/products/product-image-654981097_1200x1200.jpg?v=1571960904' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPosts.tsx",["99","100","101","102","103"],"import React, { useRef, useState } from 'react';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/state';\r\nimport { ArrayType } from '../../Dialogs/Dialogs';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nexport type PropsPostsType = {\r\n    posts: Array<PostsType>\r\n    addPost: () => void\r\n    newPostText: string\r\n    updateNewPostText: (postMessage: string) => void\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst MyPosts = (props: PropsPostsType) => {\r\n\r\n\r\n    let postsElements = props.posts.map((p: PostsType) => <Post message={p.message} likesCount={p.likesCount} />);\r\n\r\n    let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n    let addPost = () => {\r\n        let text = newPostElement.current?.value\r\n        props.addPost()\r\n    }\r\n\r\n    let onPostChange = (e: { currentTarget: { value: string; }; }) => {\r\n        let text = newPostElement.current?.value\r\n        if (text) {\r\n            props.updateNewPostText(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Dialogs.tsx",["104"],"import React, { useState } from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport { Route } from \"react-router-dom\";\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport { Message } from './Message/Message';\r\nimport { addNewDialogsMessage } from '../../redux/state';\r\n\r\nexport type DialogsType = {\r\n    dialogs: Array<ArrayType>,\r\n    messages: Array<MessagesType>,\r\n    dispatch: Function\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: number, \r\n    message: string\r\n}\r\n\r\nexport type ArrayType = {\r\n    id: number,\r\n    name: string,\r\n    img: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\nlet [message, setMessage] = useState<string>('')\r\nlet addNewMessage = () => props.dispatch(addNewDialogsMessage(message))\r\n\r\n\r\n    let dialogsElements = props.dialogs.map((d: ArrayType) => <DialogItem img={d.img} name={d.name} id={d.id} />); \r\n    let messagesElements = props.messages.map((m: MessagesType) => <Message message={m.message} />);\r\n    \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div>\r\n                <input \r\n                value={message}  \r\n                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                type=\"text\"/>\r\n                <button onClick={addNewMessage}>Отправить</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\Message\\Message.tsx",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Dialogs\\DialogItem\\DialogItem.tsx",["105"],"import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number,\r\n    img: string,\r\n    name: string\r\n}\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}><img src={props.img}/>{props.name}</NavLink>\r\n        </div>);\r\n}\r\n","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Navbar\\Navbar.tsx",["106","107","108"],"import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\App.tsx",["109","110"],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\reportWebVitals.ts",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Header\\Header.tsx",["111"],"import React from 'react';\r\nimport h from './Header.module.css'\r\n\r\n\r\nconst Header = () => {\r\n    return <div className={h.header}>\r\n        <img className={h.img} src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n    </div>\r\n}\r\n\r\nexport default Header;","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\state.tsx",["112"],"import React from 'react';\r\nimport { dialogsReducer } from './DialogsReducer';\r\nimport { profileReducer } from './ProfileReducer';\r\n\r\nexport let store = {\r\n  _state: {\r\n    dialogsPage: {\r\n      messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'How is your it-kamasutra?' },\r\n        { id: 3, message: 'Yo' },\r\n        { id: 4, message: 'Yo' },\r\n        { id: 5, message: 'Yo' }\r\n      ],\r\n      dialogs: [\r\n        { id: 1, name: 'Dimych', img: 'https://diagnostax.co.uk/wp-content/uploads/Cool-Cats-2.0-1024x585.png' },\r\n        { id: 2, name: 'Andrew', img: 'https://wallpaperaccess.com/full/82955.jpg' },\r\n        { id: 3, name: 'Sveta', img: 'https://i.ytimg.com/vi/piFZvpMe_K8/sddefault.jpg' },\r\n        { id: 4, name: 'Sasha', img: 'https://i.pinimg.com/originals/e4/1e/98/e41e98a0ca198a9e47c17c57811cfccf.jpg' },\r\n        { id: 5, name: 'Viktor', img: 'https://www.partneringforpets.org/wp-content/uploads/2014/06/sno-cone.jpg' },\r\n        { id: 6, name: 'Valera', img: 'https://pbs.twimg.com/profile_images/453072762735566848/B52gVHi2.jpeg' }\r\n      ]\r\n    },\r\n    profilePage: {\r\n      posts: [\r\n        { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n        { id: 2, message: 'It\\'s my first post', likesCount: 11 },\r\n        { id: 3, message: 'Blabla', likesCount: 11 },\r\n        { id: 4, message: 'Dada', likesCount: 11 }\r\n      ],\r\n      newPostText: 'it-camasutra'\r\n    },\r\n    sideBar: {}\r\n\r\n\r\n  },\r\n  getState() {\r\n    return this._state\r\n  },\r\n  _callSubscriber(item: any) {\r\n    console.log(item);\r\n  },\r\n\r\n  subscribe(observer: any) {\r\n    this._callSubscriber = observer\r\n  },\r\n  dispatch(action: any) {\r\n    dialogsReducer(this._state.dialogsPage, action) // если отдать кусок массива в функцию, фунция меняет исходный массив?\r\n    profileReducer(this._state.profilePage, action)\r\n\r\n    this._callSubscriber(this._state) // нужен ли здесь параметр, ведь перерисовка вызывается без него\r\n  }\r\n}\r\n\r\nexport const addPostActionCreator = () => {\r\n  return {\r\n    type: 'ADD-POST'\r\n  }\r\n}\r\n\r\nexport let updateNewPostTextActionCreator = (text: string) => {\r\n  return {\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: text\r\n\r\n  }\r\n}\r\n\r\nexport let addNewDialogsMessage = (text: string) => {\r\n  return {\r\n    type: 'ADD-NEW-MESSAGE',\r\n    newMessage: text\r\n  }\r\n}\r\n\r\nwindow.store = store\r\ndeclare global {\r\n  interface Window { store: any; }\r\n}\r\n\r\nwindow.store = window.store || {};\r\n","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\DialogsReducer.tsx",["113","114"],"import React from 'react';\r\nimport { ArrayType, MessagesType } from '../Components/Dialogs/Dialogs';\r\ntype DialogsType = {\r\n  dialogs: Array<ArrayType>,\r\n  messages: Array<MessagesType>,\r\n}\r\n\r\nlet initialState: DialogsType = {\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your it-kamasutra?' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n    { id: 5, message: 'Yo' }\r\n  ],\r\n  dialogs: [\r\n    { id: 1, name: 'Dimych', img: 'https://diagnostax.co.uk/wp-content/uploads/Cool-Cats-2.0-1024x585.png' },\r\n    { id: 2, name: 'Andrew', img: 'https://wallpaperaccess.com/full/82955.jpg' },\r\n    { id: 3, name: 'Sveta', img: 'https://i.ytimg.com/vi/piFZvpMe_K8/sddefault.jpg' },\r\n    { id: 4, name: 'Sasha', img: 'https://i.pinimg.com/originals/e4/1e/98/e41e98a0ca198a9e47c17c57811cfccf.jpg' },\r\n    { id: 5, name: 'Viktor', img: 'https://www.partneringforpets.org/wp-content/uploads/2014/06/sno-cone.jpg' },\r\n    { id: 6, name: 'Valera', img: 'https://pbs.twimg.com/profile_images/453072762735566848/B52gVHi2.jpeg' }\r\n  ]\r\n}\r\n\r\n\r\n\r\nexport const dialogsReducer = (state: any = initialState, action: any) => {\r\n  if (action.type == 'ADD-NEW-MESSAGE') {\r\n    // state.dialogs.push({\r\n    //   id: state.dialogs.length,\r\n    //   name: 'User',\r\n    //   img: 'https://wallpaper-house.com/data/out/5/wallpaper2you_60587.jpg'\r\n    // })\r\n    state.messages.push({\r\n      id: state.messages.length,\r\n      message: action.newMessage\r\n    })\r\n  }\r\n  return state //зачем нам return если снаружи мы перерисовываем весь массив\r\n}","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ProfileReducer.tsx",["115"],"import React from 'react';\r\nimport { PostsType } from '../Components/Profile/MyPosts/MyPosts';\r\ntype InitialStateType = {\r\n  posts: Array<PostsType>,\r\n  newPostText: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n    { id: 2, message: 'It\\'s my first post', likesCount: 11 },\r\n    { id: 3, message: 'Blabla', likesCount: 11 },\r\n    { id: 4, message: 'Dada', likesCount: 11 }\r\n  ],\r\n  newPostText: 'it-camasutra'\r\n}\r\n\r\nexport const profileReducer = (state: any=initialState, action: any) => {\r\n  if (action.type === 'ADD-POST') {\r\n    let newPost = {\r\n      id: 5,\r\n      message: state.newPostText,\r\n      likesCount: 0\r\n    }\r\n    state.posts.push(newPost)\r\n    state.newPostText=''\r\n  }\r\n  else if (action.type === 'UPDATE-NEW-POST-TEXT') {\r\n    state.newPostText = action.newText\r\n  }\r\n  return state\r\n}","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\ReduxStore.tsx",[],"D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\redux\\SideBarReducer.tsx",["116"],"import React from 'react';\r\nlet initialState = {}\r\nexport const sideBarReducer = (state: any = initialState, action: any) => {\r\n\r\n  return state\r\n}","D:\\It-incubator\\ReactProjects\\way-of-samurai\\src\\Components\\Profile\\MyPosts\\MyPostsContainer.tsx",["117","118","119","120","121"],"import React, { useRef, useState } from 'react';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/state';\r\nimport { ArrayType } from '../../Dialogs/Dialogs';\r\nimport MyPosts from './MyPosts';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nexport type PropsPostsType = {\r\n    store: any\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst MyPostsContainer= (props: PropsPostsType) => {\r\n\r\n\r\n    let postsElements = props.store.getState().profilePage.posts\r\n\r\n    let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n    let addPost = () => {\r\n            props.store.dispatch(addPostActionCreator())\r\n            // props.updateNewPostText('')\r\n    }\r\n\r\n    let onPostChange = (text: string) => {\r\n        props.store.dispatch(updateNewPostTextActionCreator(text))\r\n    }\r\n\r\n    return (\r\n        <MyPosts \r\n        updateNewPostText={onPostChange}\r\n        addPost={addPost}\r\n        posts={postsElements}\r\n        newPostText={props.store.getState().profilePage.newPostText}\r\n        />\r\n    )\r\n}\r\n\r\nexport default MyPostsContainer;",{"ruleId":"122","severity":1,"message":"123","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":9},{"ruleId":"122","severity":1,"message":"126","line":3,"column":8,"nodeType":"124","messageId":"125","endLine":3,"endColumn":15},{"ruleId":"122","severity":1,"message":"127","line":3,"column":19,"nodeType":"124","messageId":"125","endLine":3,"endColumn":33},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":9,"column":17,"nodeType":"134","endLine":10,"endColumn":125},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":8,"column":7,"nodeType":"134","endLine":8,"endColumn":129},{"ruleId":"122","severity":1,"message":"135","line":1,"column":25,"nodeType":"124","messageId":"125","endLine":1,"endColumn":33},{"ruleId":"122","severity":1,"message":"136","line":2,"column":10,"nodeType":"124","messageId":"125","endLine":2,"endColumn":30},{"ruleId":"122","severity":1,"message":"137","line":2,"column":32,"nodeType":"124","messageId":"125","endLine":2,"endColumn":62},{"ruleId":"122","severity":1,"message":"138","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":19},{"ruleId":"122","severity":1,"message":"139","line":26,"column":13,"nodeType":"124","messageId":"125","endLine":26,"endColumn":17},{"ruleId":"122","severity":1,"message":"140","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":15,"column":32,"nodeType":"134","endLine":15,"endColumn":54},{"ruleId":"141","severity":1,"message":"142","line":15,"column":17,"nodeType":"134","endLine":15,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":18,"column":17,"nodeType":"134","endLine":18,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":21,"column":17,"nodeType":"134","endLine":21,"endColumn":20},{"ruleId":"122","severity":1,"message":"143","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":12},{"ruleId":"122","severity":1,"message":"144","line":11,"column":6,"nodeType":"124","messageId":"125","endLine":11,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":7,"column":9,"nodeType":"134","endLine":7,"endColumn":97},{"ruleId":"122","severity":1,"message":"145","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"145","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"147","line":29,"column":19,"nodeType":"148","messageId":"149","endLine":29,"endColumn":21},{"ruleId":"122","severity":1,"message":"145","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"145","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},{"ruleId":"122","severity":1,"message":"135","line":1,"column":25,"nodeType":"124","messageId":"125","endLine":1,"endColumn":33},{"ruleId":"122","severity":1,"message":"138","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":19},{"ruleId":"122","severity":1,"message":"123","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":9},{"ruleId":"122","severity":1,"message":"150","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":12},{"ruleId":"122","severity":1,"message":"151","line":22,"column":9,"nodeType":"124","messageId":"125","endLine":22,"endColumn":23},"@typescript-eslint/no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","'MyPosts' is defined but never used.","'PropsPostsType' is defined but never used.","no-native-reassign",["152"],"no-negated-in-lhs",["153"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'addPostActionCreator' is defined but never used.","'updateNewPostTextActionCreator' is defined but never used.","'ArrayType' is defined but never used.","'text' is assigned a value but never used.","'Route' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'logo' is defined but never used.","'AppType' is defined but never used.","'React' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Post' is defined but never used.","'newPostElement' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]